{"version":3,"sources":["View/styles.tsx","View/WorkScreen/components/WorkonBoarding.tsx","Model/redux/actions.tsx","View/WorkScreen/components/WorkForm.tsx","View/WorkScreen/components/WorkTimer.tsx","View/WorkScreen/components/WorkCongrats.tsx","View/WorkScreen/WorkScreen.tsx","Model/redux/reducers/sprintReducer.tsx","Model/redux/reducers/relaxReducer.tsx","Model/redux/reducers/index.tsx","Model/redux/storage.tsx","View/RestScreen/components/RestonBoarding.tsx","View/RestScreen/components/RestForm.tsx","View/RestScreen/components/RestTimer.tsx","View/RestScreen/components/RestCongrats.tsx","View/RestScreen/RestScreen.tsx","App.tsx","web-build/register-service-worker.js"],"names":["colorScheme","Appearance","getColorScheme","gtd_stylesheet","StyleSheet","create","container","height","justifyContent","alignItems","textCenter","textAlign","textAlignVertical","color","DarkTheme","colors","text","DefaultTheme","formContainer","flexDirection","upperPart","WorkonBoarding","View","style","h2","h1","type","title","onPress","props","navigation","navigate","work_components","form","Component","sprintUpdate","value","payload","relaxUpdate","validationSchema","yup","shape","hours","required","moreThan","integer","lessThan","minutes","WorkForm","console","log","this","initialValues","validateOnChange","onSubmit","val","credit","timer","initialErrors","handleChange","handleBlur","handleSubmit","values","errors","isValid","touched","KeyboardAvoidingView","behavior","width","keyboardType","placeholder","inputStyle","onChangeText","onBlur","disabled","mapReducerToProps","connect","state","sprintCred","sprint","WorkTimer","now","Date","start","diff","id","setInterval","n","getTime","sprintCredit","clearInterval","interval","end","setState","BackHandler","addEventListener","getUTCHours","getUTCMinutes","getUTCSeconds","propTypes","prop","PropTypes","mapDispatchToProps","WorkCongrats","earnings","relax","earnings_string","stack","createStackNavigator","onBoarding","WorkScreen","Navigator","screenOptions","headerLeft","gestureEnabled","Screen","name","component","options","headerShown","action","combineReducers","store","createStore","rootReducer","RestOnBoarding","rest_components","getMinutes","RestForm","recreateValidationSchema","rest","restUpdate","route","params","RestCongrats","RestScreen","RestTimer","bottomTabNavigator","createBottomTabNavigator","App","scheme","useColorScheme","NavigationContainer","theme","tabBarIcon","size","Platform","OS","FontAwesome5","navigator","window","serviceWorker","register","scope","then","info","catch","error"],"mappings":"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","file":"static/js/app.c989fb61.chunk.js","sourcesContent":["import { StyleSheet } from \"react-native\"\nimport { Appearance } from \"react-native-appearance\";\nimport { DarkTheme, DefaultTheme } from \"@react-navigation/native\";\n\nconst colorScheme = Appearance.getColorScheme();\n\nexport const gtd_stylesheet = StyleSheet.create({\n    container:{\n        height:'100%',\n        justifyContent:'space-around',\n        alignItems:'center',\n    },\n    textCenter:{\n        textAlign:'center',\n        textAlignVertical:'center',\n        color: colorScheme === 'dark' ? DarkTheme.colors.text : DefaultTheme.colors.text \n    },\n\n    formContainer:{\n        flexDirection:'row',\n        alignItems:'center',\n        justifyContent:'center'\n    },\n    upperPart:{\n        justifyContent:'center',\n        alignItems:'center'\n    }\n});\n\n","import React, { Component } from 'react'\nimport { View } from 'react-native'\nimport {Text, Button} from 'react-native-elements'\nimport { work_components } from '../WorkScreen'\nimport { gtd_stylesheet } from '../../styles'\nexport default class WorkonBoarding extends Component {\n    render() {\n        return (\n            <View style={gtd_stylesheet.container}>\n                <View>\n                <Text h2 style={gtd_stylesheet.textCenter}>Let's begin</Text>\n                <Text h1 style={gtd_stylesheet.textCenter}>SPRINT</Text>\n                </View>\n                <Button type='solid' title='Start!' onPress={() => this.props.navigation.navigate(work_components.form)}/>\n            </View>\n        )\n    }\n}\n\n\n","export const UPDATE_SPRINT = 'UPDATE_SPRINT';\n\nexport const sprintUpdate = value => ({\n    type:UPDATE_SPRINT,\n    payload: value\n});\n\nexport const UPDATE_RELAX = 'UPDATE_RELAX';\n\n\nexport const relaxUpdate = value => ({\n    type:UPDATE_RELAX,\n    payload: value,\n});","import React, { Component } from \"react\";\nimport { View, KeyboardAvoidingView } from \"react-native\";\nimport { Text, Input, Button } from \"react-native-elements\";\nimport { gtd_stylesheet } from \"../../styles\";\n\nimport {connect} from 'react-redux';\nimport { sprintUpdate } from \"../../../Model/redux/actions\";\nimport { Formik } from \"formik\";\n\nimport * as yup from \"yup\";\nimport { work_components } from \"../WorkScreen\";\n\nconst validationSchema = yup.object().shape({\n  hours: yup.number().required().moreThan(-1).integer().lessThan(12),\n  minutes: yup.number().required().moreThan(-1).integer().lessThan(60),\n});\n\nconst convertToDate = (hours, minutes) => {\n  let value = hours * 60 * 60 * 1000 + minutes * 60 *1000;\n\n  return value;\n}\n\n\nexport class WorkForm extends Component {\n\n  render() {\n    console.log(this.props);\n\n    return (\n      <Formik\n        initialValues={{ hours: \"\", minutes: \"\" }}\n        validateOnChange={true}\n        onSubmit={(val) => {\n          this.props.sprintUpdate({credit: convertToDate(val.hours, val.minutes)});        \n          this.props.navigation.navigate(work_components.timer)  \n        }}\n        validationSchema={validationSchema}\n        initialErrors={{ hours: \"\", minutes: \"\" }}\n        \n      >\n        {({\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          values,\n          errors,\n          isValid,\n          touched,\n        }) => (\n          <KeyboardAvoidingView style={gtd_stylesheet.container} behavior='padding'>\n            <View style={gtd_stylesheet.upperPart}>\n              <Text h2 style={gtd_stylesheet.textCenter}>For how long are you going to sprint?</Text>\n\n              <View style={[gtd_stylesheet.formContainer]}>\n                <View style={{width:'50%'}}>\n                  <Input\n                    keyboardType=\"numeric\"\n                    placeholder=\"hh\"\n                    inputStyle={[gtd_stylesheet.textCenter, {textAlign:'right'}]}\n                    onChangeText={handleChange(\"hours\")}\n                    onBlur={handleBlur(\"hours\")}\n                    value={values.hours}\n                  />\n                  {touched.hours && errors.hours && <Text style={{textAlign:'right'}}>{errors.hours}</Text>}\n                </View>\n                <Text style={gtd_stylesheet.textCenter}>:</Text>\n                <View style={{width:'50%'}}>\n                  <Input\n                    keyboardType=\"numeric\"\n                    placeholder=\"mm\"\n                    onChangeText={handleChange(\"minutes\")}\n                    onBlur={handleBlur(\"minutes\")}\n                    value={values.minutes}\n                    inputStyle={[gtd_stylesheet.textCenter,{textAlign:'left'}]}\n                  />\n                  {touched.minutes && errors.minutes && (\n                    <Text>{errors.minutes}</Text>\n                  )}\n                </View>\n              </View>\n            </View>\n            <Button\n              type=\"solid\"\n              title=\"Start!\"\n              onPress={handleSubmit}\n              disabled={!isValid}\n            />\n          </KeyboardAvoidingView>\n        )}\n      </Formik>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  sprintCred: state.sprint\n})\n\n\nconst mapReducerToProps = {\n  sprintUpdate: sprintUpdate,\n}\n\nexport default connect(mapStateToProps, mapReducerToProps)(WorkForm)","import React, { Component } from 'react'\nimport { View, BackHandler } from 'react-native'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport { sprintUpdate } from \"../../../Model/redux/actions\";\nimport { relaxUpdate } from \"../../../Model/redux/actions\";\nimport { gtd_stylesheet } from '../../styles';\nimport { Text } from 'react-native-elements';\nimport { work_components } from '../WorkScreen';\n\nexport class WorkTimer extends Component {\n    static propTypes = {\n        prop: PropTypes\n    }\n\n    constructor(props) {\n        super(props);\n        const now = new Date();\n        this.state = {start: now, diff:0}\n        \n        \n    }\n\n    componentDidMount(){\n        let id = setInterval(() => {\n            let n = new Date();\n            let diff =  {};\n            diff = this.state.start.getTime() + this.props.sprintCredit.credit - n.getTime()\n\n            if(diff <= 0) {\n                clearInterval(this.state.interval);\n                diff = 'tt';\n                this.props.relaxUpdate({credit: this.props.sprintCredit.credit / 3})\n                this.props.sprintUpdate({credit: this.props.sprintCredit.credit * -1});\n                this.props.navigation.navigate(work_components.end);\n                /* navigate to end & congrats */\n            }\n            this.setState({diff: diff});\n\n        }, 250);\n\n        this.setState({interval: id});\n\n        BackHandler.addEventListener('hardwareBackPress', function() {\n            /**\n             * this.onMainScreen and this.goBack are just examples,\n             * you need to use your own implementation here.\n             *\n             * Typically you would use the navigator here to go to the last state.\n             */\n            /**\n             * Returning false will let the event to bubble up & let other event listeners\n             * or the system's default back action to be executed.\n             */\n            return true;\n          });\n    }\n\n    render() {\n        let diff = this.state.diff;\n        if (this.state.diff !== 'tt') {\n            diff = new Date(this.state.diff);\n            diff = diff.getUTCHours() + ':' + (diff.getUTCMinutes() < 10 ? '0' + diff.getUTCMinutes() : diff.getUTCMinutes()) + ':' + (diff.getUTCSeconds() < 10 ? '0' + diff.getUTCSeconds() : diff.getUTCSeconds());\n        }\n\n        \n        return (\n            <View style={gtd_stylesheet.container}>\n                <Text h1 style={gtd_stylesheet.textCenter}> {diff}  </Text>\n            </View>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    sprintCredit: state.sprint\n})\n\nconst mapDispatchToProps = {\n    sprintUpdate,\n    relaxUpdate,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkTimer)\n","import React, { Component } from 'react'\nimport { View } from 'react-native'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { gtd_stylesheet } from '../../styles'\nimport { Text, Button } from 'react-native-elements'\nimport { work_components } from '../WorkScreen'\n\nexport class WorkCongrats extends Component {\n    render() {\n\n        let earnings = new Date(this.props.relax.credit)\n\n        let earnings_string = '' + earnings.getUTCHours();\n\n        earnings_string += ':' + ((earnings.getUTCMinutes() < 10) ? ('0' + earnings.getUTCMinutes()) : earnings.getUTCMinutes());\n        earnings_string += ':' + ((earnings.getUTCSeconds() < 10) ? ('0' + earnings.getUTCSeconds()) : earnings.getUTCSeconds());\n\n\n        return (\n            <View style={gtd_stylesheet.container}>\n                <Text>You earned</Text>\n                <Text h1 style={gtd_stylesheet.textCenter}> {earnings_string} </Text>\n                <Text>so far!</Text>\n                <Button title='Start again!' onPress={() => {this.props.navigation.navigate(work_components.form)}}/>\n            </View>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    relax: state.relax\n})\n\nconst mapDispatchToProps = {\n    \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkCongrats)\n","import React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nimport {createStackNavigator} from '@react-navigation/stack';\nimport WorkonBoarding from './components/WorkonBoarding';\nimport WorkForm from './components/WorkForm';\nimport WorkTimer  from './components/WorkTimer';\nimport WorkCongrats from './components/WorkCongrats';\n\nconst stack = createStackNavigator();\n\nexport const work_components = {\n    onBoarding: 'New Sprint!',\n    form:\"Sprint for...\",\n    timer:'Sprinting..',\n    end:'Sprint finished!'\n}\n\n\nexport default class WorkScreen extends Component {\n    render() {\n        return (\n            <stack.Navigator screenOptions={{headerLeft:null, gestureEnabled:false}}>\n                <stack.Screen name={work_components.onBoarding} component={WorkonBoarding} />\n                <stack.Screen name={work_components.form} component={WorkForm} />\n                <stack.Screen name={work_components.timer} component={WorkTimer} options={{headerShown:false}}/>\n                <stack.Screen name={work_components.end} component={WorkCongrats} />\n\n            </stack.Navigator>\n        )\n    }\n}\n","import { UPDATE_SPRINT } from \"../actions\";\n\n\nconst sprint = (state = { credit: 0 }, action) => {\n  switch (action.type) {\n    case UPDATE_SPRINT:      \n      return {...state, credit:(state.credit + action.payload.credit)};\n\n    default:\n      return state;\n  }\n}\n\nexport default sprint\n","import { UPDATE_RELAX } from \"../actions\";\n\n\nconst relax = (state = { credit: 0 }, action) => {\n  switch (action.type) {\n    case UPDATE_RELAX:      \n      return {...state, credit:(state.credit + action.payload.credit)};\n\n    default:\n      return state;\n  }\n}\n\nexport default relax\n","\nimport {combineReducers} from 'redux';\nimport sprint from './sprintReducer'\nimport relax from './relaxReducer';\n\nexport default combineReducers({\n    sprint: sprint,\n    relax:relax\n});","\nimport rootReducer from './reducers/index';\nimport {createStore} from 'redux';\n\n\nexport const store = createStore(rootReducer);","import React, { Component } from 'react'\nimport { View } from 'react-native'\nimport {Text, Button} from 'react-native-elements'\nimport { gtd_stylesheet } from '../../styles'\nimport { rest_components } from '../RestScreen'\n\nexport default class RestOnBoarding extends Component {\n    render() {\n        return (\n            <View style={gtd_stylesheet.container}>\n                <View>\n                <Text h2 style={gtd_stylesheet.textCenter}>Let's</Text>\n                <Text h1 style={gtd_stylesheet.textCenter}>Relax</Text>\n                </View>\n\n                <Button type='solid' title='Start!' onPress={() => {this.props.navigation.navigate(rest_components.form)}}/>\n            </View>\n        )\n    }\n}\n\n\n","import React, { Component } from \"react\";\nimport { View, KeyboardAvoidingView } from \"react-native\";\nimport { Text, Input, Button } from \"react-native-elements\";\nimport { gtd_stylesheet } from \"../../styles\";\n\nimport {connect} from 'react-redux';\nimport { relaxUpdate } from \"../../../Model/redux/actions\";\nimport { Formik } from \"formik\";\n\nimport * as yup from \"yup\";\nimport relax from \"../../../Model/redux/reducers/relaxReducer\";\nimport { rest_components } from \"../RestScreen\";\n\nconst convertToDate = (hours, minutes) => {\n  let value = hours * 60 * 60 * 1000 + minutes * 60 *1000;\n\n  return value;\n}\n\nconst getHours = (val) => {\n  let s = new Date(val);\n\n  return s.getUTCHours();\n}\n\nconst getMinutes = (val) => {\n  let s = new Date(val);\n\n  return s.getUTCMinutes();\n}\n\nexport class RestForm extends Component {\n\n  validationSchema = {}\n\n  recreateValidationSchema = () => {\n    this.validationSchema = yup.object().shape({\n      hours: yup.number().required().moreThan(-1).integer().lessThan(getHours(this.props.rest.credit) + 1),\n      minutes: yup.number().required().moreThan(-1).integer().lessThan(getMinutes(this.props.rest.credit) + 1),\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.recreateValidationSchema();\n  }\n\n  render() {\n    this.recreateValidationSchema();\n    return (\n      <Formik\n        initialValues={{ hours: \"\", minutes: \"\" }}\n        validateOnChange={true}\n        onSubmit={(val) => {\n          this.props.navigation.navigate(rest_components.timer, {timer: convertToDate(val.hours, val.minutes)});  \n        }}\n        validationSchema={this.validationSchema}\n        initialErrors={{ hours: \"\", minutes: \"\" }}\n        \n      >\n        {({\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          values,\n          errors,\n          isValid,\n          touched,\n        }) => (\n          <KeyboardAvoidingView style={gtd_stylesheet.container} behavior='padding'>\n            <View style={gtd_stylesheet.upperPart}>\n              <Text h2 style={gtd_stylesheet.textCenter}>You'll be resting for...</Text>\n\n              <View style={[gtd_stylesheet.formContainer]}>\n                <View style={{width:'50%'}}>\n                  <Input\n                    keyboardType=\"numeric\"\n                    placeholder=\"hh\"\n                    inputStyle={[gtd_stylesheet.textCenter, {textAlign:'right'}]}\n                    onChangeText={handleChange(\"hours\")}\n                    onBlur={handleBlur(\"hours\")}\n                    value={values.hours}\n                  />\n                  {touched.hours && errors.hours && <Text style={{textAlign:'right'}}>{errors.hours}</Text>}\n                </View>\n                <Text style={gtd_stylesheet.textCenter}>:</Text>\n                <View style={{width:'50%'}}>\n                  <Input\n                    keyboardType=\"numeric\"\n                    placeholder=\"mm\"\n                    onChangeText={handleChange(\"minutes\")}\n                    onBlur={handleBlur(\"minutes\")}\n                    value={values.minutes}\n                    inputStyle={[gtd_stylesheet.textCenter,{textAlign:'left'}]}\n                  />\n                  {touched.minutes && errors.minutes && (\n                    <Text>{errors.minutes}</Text>\n                  )}\n                </View>\n              </View>\n            </View>\n            <Button\n              type=\"solid\"\n              title=\"Start!\"\n              onPress={handleSubmit}\n              disabled={!isValid}\n            />\n          </KeyboardAvoidingView>\n        )}\n      </Formik>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  rest: state.relax\n})\n\n\nconst mapReducerToProps = {\n  restUpdate: relaxUpdate,\n}\n\nexport default connect(mapStateToProps, mapReducerToProps)(RestForm)","import React, { Component } from 'react'\nimport { View, BackHandler } from 'react-native'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport { sprintUpdate } from \"../../../Model/redux/actions\";\nimport { relaxUpdate } from \"../../../Model/redux/actions\";\nimport { gtd_stylesheet } from '../../styles';\nimport { Text } from 'react-native-elements';\nimport { rest_components } from '../RestScreen';\n\nexport class WorkTimer extends Component {\n    static propTypes = {\n        prop: PropTypes\n    }\n\n    constructor(props) {\n        super(props);\n        const now = new Date();\n        this.state = {start: now, diff:0}\n        \n    }\n\n    componentDidMount(){\n        let id = setInterval(() => {\n            let n = new Date();\n            let diff =  {};\n            diff = this.state.start.getTime() + this.props.route.params?.timer - n.getTime()\n\n            if(diff <= 0) {\n                clearInterval(this.state.interval);\n                diff = 'tt';\n                this.props.relaxUpdate({credit: -this.props.route.params?.timer})\n                this.props.navigation.navigate(rest_components.end);\n                /* navigate to end & congrats */\n            }\n            this.setState({diff: diff});\n\n        }, 250);\n\n        this.setState({interval: id});\n\n        BackHandler.addEventListener('hardwareBackPress', function() {\n            /**\n             * this.onMainScreen and this.goBack are just examples,\n             * you need to use your own implementation here.\n             *\n             * Typically you would use the navigator here to go to the last state.\n             */\n            /**\n             * Returning false will let the event to bubble up & let other event listeners\n             * or the system's default back action to be executed.\n             */\n            return true;\n          });\n    }\n\n    render() {\n        let diff = this.state.diff;\n        if (this.state.diff !== 'tt') {\n            diff = new Date(this.state.diff);\n            diff = diff.getUTCHours() + ':' + (diff.getUTCMinutes() < 10 ? '0' + diff.getUTCMinutes() : diff.getUTCMinutes()) + ':' + (diff.getUTCSeconds() < 10 ? '0' + diff.getUTCSeconds() : diff.getUTCSeconds());\n        }\n        \n        return (\n            <View style={gtd_stylesheet.container}>\n                <Text h1 style={gtd_stylesheet.textCenter}> {diff}  </Text>\n            </View>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n})\n\nconst mapDispatchToProps = {\n    relaxUpdate,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkTimer)\n","import React, { Component } from 'react'\nimport { View } from 'react-native'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { gtd_stylesheet } from '../../styles'\nimport { Text, Button } from 'react-native-elements'\nimport { rest_components } from '../RestScreen'\n\n\nexport class RestCongrats extends Component {\n    render() {\n\n        let earnings = new Date(this.props.relax.credit)\n\n        let earnings_string = '' + earnings.getUTCHours();\n\n        earnings_string += ':' + ((earnings.getUTCMinutes() < 10) ? ('0' + earnings.getUTCMinutes()) : earnings.getUTCMinutes());\n        earnings_string += ':' + ((earnings.getUTCSeconds() < 10) ? ('0' + earnings.getUTCSeconds()) : earnings.getUTCSeconds());\n\n\n        return (\n            <View style={gtd_stylesheet.container}>\n                <Text>You still have</Text>\n                <Text h1 style={gtd_stylesheet.textCenter}> {earnings_string} </Text>\n                <Text>to rest!</Text>\n                <Button title='Start again!' onPress={() => {this.props.navigation.navigate(rest_components.form)}}/>\n            </View>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    relax: state.relax\n})\n\nconst mapDispatchToProps = {\n    \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RestCongrats)\n","import React, { Component } from 'react'\nimport RestOnBoarding from './components/RestonBoarding'\nimport { createStackNavigator } from '@react-navigation/stack';\nimport RestForm from './components/RestForm';\nimport RestTimer from './components/RestTimer';\nimport RestCongrats from './components/RestCongrats';\n\nexport const rest_components = {\n    onBoarding: 'Relax time ;)',\n    form: 'Relax for...',\n    timer: 'Stop looking',\n    end:'Boohoo ;('  \n};\n\nconst stack = createStackNavigator();\n\nexport default class RestScreen extends Component {\n    render() {\n        return (\n            <stack.Navigator>\n                <stack.Screen name={rest_components.onBoarding} component={RestOnBoarding}/>\n                <stack.Screen name={rest_components.form} component={RestForm}/>\n                <stack.Screen name={rest_components.timer} component={RestTimer}/>\n                <stack.Screen name={rest_components.end} component={RestCongrats}/>\n            </stack.Navigator>\n        )\n    }\n}\n\n","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { StyleSheet, Text, View, Platform } from \"react-native\";\nimport { AppearanceProvider, useColorScheme } from \"react-native-appearance\";\nimport { Provider } from \"react-redux\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from \"@react-navigation/native\";\nimport WorkScreen from \"./View/WorkScreen/WorkScreen\";\nimport { store } from \"./Model/redux/storage\";\nimport Icon from \"react-native-vector-icons/FontAwesome\";\nimport FontAwesome5 from \"react-native-vector-icons/FontAwesome5\";\nimport RestScreen from \"./View/RestScreen/RestScreen\";\n\nconst bottomTabNavigator = createBottomTabNavigator();\n\nexport default function App() {\n  const scheme = useColorScheme();\n\n  return (\n    <Provider store={store}>\n      <AppearanceProvider>\n        <NavigationContainer\n          theme={scheme === \"dark\" ? DarkTheme : DefaultTheme}\n        >\n          <bottomTabNavigator.Navigator>\n            <bottomTabNavigator.Screen\n              name=\"Work\"\n              component={WorkScreen}\n              options={{\n                tabBarIcon: ({ color, size }) => {\n                  if (Platform.OS === \"web\")\n                    return (\n                      <FontAwesome5\n                        name={\"suitcase\"}\n                        color={color}\n                        size={size}\n                      />\n                    );\n                  return (<Icon name=\"suitcase\" color={color} size={size} />);\n                },\n              }}\n            />\n\n<bottomTabNavigator.Screen\n              name=\"Relax\"\n              component={RestScreen}\n              options={{\n                tabBarIcon: ({ color, size }) => {\n                    return (\n                      <FontAwesome5\n                        name={'smile'}\n                        color={color}\n                        size={size}\n                      />\n                    );\n                },\n              }}\n            />\n\n          </bottomTabNavigator.Navigator>\n        </NavigationContainer>\n      </AppearanceProvider>\n    </Provider>\n  );\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/gtd-timer/expo-service-worker.js', { scope: '/gtd-timer/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}